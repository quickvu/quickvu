Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ACTION parameters
Rule 2     statement -> ACTION
Rule 3     parameters -> LPAR RPAR
Rule 4     parameters -> LPAR ELEMENTS RPAR
Rule 5     parameters -> LPAR NUM RPAR
Rule 6     parameters -> LPAR NAME RPAR

Terminals, with rules where they appear

ACTION               : 1 2
ELEMENTS             : 4
LPAR                 : 3 4 5 6
NAME                 : 6
NUM                  : 5
RPAR                 : 3 4 5 6
error                : 

Nonterminals, with rules where they appear

parameters           : 1
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . ACTION parameters
    (2) statement -> . ACTION

    ACTION          shift and go to state 1

    statement                      shift and go to state 2

state 1

    (1) statement -> ACTION . parameters
    (2) statement -> ACTION .
    (3) parameters -> . LPAR RPAR
    (4) parameters -> . LPAR ELEMENTS RPAR
    (5) parameters -> . LPAR NUM RPAR
    (6) parameters -> . LPAR NAME RPAR

    $end            reduce using rule 2 (statement -> ACTION .)
    LPAR            shift and go to state 3

    parameters                     shift and go to state 4

state 2

    (0) S' -> statement .



state 3

    (3) parameters -> LPAR . RPAR
    (4) parameters -> LPAR . ELEMENTS RPAR
    (5) parameters -> LPAR . NUM RPAR
    (6) parameters -> LPAR . NAME RPAR

    RPAR            shift and go to state 8
    ELEMENTS        shift and go to state 5
    NUM             shift and go to state 6
    NAME            shift and go to state 7


state 4

    (1) statement -> ACTION parameters .

    $end            reduce using rule 1 (statement -> ACTION parameters .)


state 5

    (4) parameters -> LPAR ELEMENTS . RPAR

    RPAR            shift and go to state 9


state 6

    (5) parameters -> LPAR NUM . RPAR

    RPAR            shift and go to state 10


state 7

    (6) parameters -> LPAR NAME . RPAR

    RPAR            shift and go to state 11


state 8

    (3) parameters -> LPAR RPAR .

    $end            reduce using rule 3 (parameters -> LPAR RPAR .)


state 9

    (4) parameters -> LPAR ELEMENTS RPAR .

    $end            reduce using rule 4 (parameters -> LPAR ELEMENTS RPAR .)


state 10

    (5) parameters -> LPAR NUM RPAR .

    $end            reduce using rule 5 (parameters -> LPAR NUM RPAR .)


state 11

    (6) parameters -> LPAR NAME RPAR .

    $end            reduce using rule 6 (parameters -> LPAR NAME RPAR .)

